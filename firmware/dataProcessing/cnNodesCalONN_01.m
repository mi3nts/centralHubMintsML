
function [] = cnNodesCalONN_01(nodeIndex)

%% Testing - TEST2
% Updates for  2021 - 02 - 19
% Kept the Original Cap For PM 1
% Have 10 graphs for the training testing data
% Basically time series plots
% New CSV Global For Testing
% Added TEST0 for Label String and Label String Daily
% Meant for Optimised Neural Network
% Has a simplified Representative sampling

clc
clearvars -except nodeIndex
close all

versionStrPre = 'Central_Ronn_All_ONN_1';
versionStrTrain = [versionStrPre '_' datestr(now,'yyyy_mm_dd_HH_MM_SS')];
versionStrMdl   = versionStrTrain;
disp(versionStrMdl)
display(newline)
dailyString        =versionStrPre+"_Daily";
disp(dailyString)
display(newline)
graphTitle1     = "Optimized NN";
disp(graphTitle1)
display(newline)
globalCSVLabel = "resultsNowXT_CN_ONN_1"

representativeSample = false;


display(newline)
display("---------------------MINTS---------------------")
display(datestr(datetime('now')))
addpath("../../functions/")
addpath("../functions/")
addpath("YAMLMatlab_0.4.3")
mintsDefinitions  = ReadYaml('../mintsDefinitions.yaml')

dataFolder         = mintsDefinitions.dataFolder;
nodeIDs            = mintsDefinitions.nodeIDs;
timeSpan           = seconds(mintsDefinitions.timeSpan);
% binsPerColumn      = mintsDefinitions.binsPerColumn;
numberPerBin       = mintsDefinitions.numberPerBin ;
pValid             = mintsDefinitions.pValid;
airmarID           = mintsDefinitions.airmarID;
% instruments        = mintsDefinitions.instruments;
% units               = mintsDefinitions.units;
poolWorkers         = mintsDefinitions.poolWorkers;

% poolobj = gcp('nocreate');
% delete(poolobj);

% parpool(poolWorkers)

mintsTargets      = mintsDefinitions.mintsTargets;
% mintsTargetLabels = mintsDefinitions.mintsTargetLabels;


rawFolder           =  dataFolder + "/raw";
rawMatsFolder       =  dataFolder + "/rawMats";
centralMatsFolder   =  rawMatsFolder  + "/CentralNodes";
referenceFolder     =  dataFolder + "/reference";
referenceMatsFolder =  dataFolder + "/referenceMats";


palasFolder         =  referenceFolder       + "/palasStream";
palasMatsFolder     =  referenceMatsFolder   + "/palas";
licorMatsFolder     =  referenceMatsFolder   + "/licor";
noxMatsFolder       =  referenceMatsFolder   + "/nox";
bcMatsFolder        =  referenceMatsFolder   + "/bc";
o3MatsFolder        =  referenceMatsFolder   + "/o3";


driveSyncFolder     =  strcat(dataFolder,"/exactBackUps/palasStream/");
mergedMatsFolder    =  dataFolder + "/mergedMats/centralNodes";
GPSFolder           =  referenceMatsFolder + "/carMintsGPS"  ;
airmarFolder        =  referenceMatsFolder + "/airmar"
modelsMatsFolder    =  dataFolder + "/modelsMats/centralNodes";
trainingMatsFolder  =  dataFolder + "/trainingMats/centralNodes";
plotsFolder         =  dataFolder + "/visualAnalysis/centralNodes";
resultsFolder       =  dataFolder + "/results/centralNodes";
updateFolder        =  dataFolder + "/lastUpdate/centralNodes";

%% for graphing
limitsLow  ={ 0,  0,  0,  0,  0  , 0  ,0,  20, 10, .98};
limitsHigh= {20, 40, 50, 60,  100, 500, 45,  75, 25,  .995};


display(newline)
folderCheck(dataFolder)
display("Data Folder Located @:"+ dataFolder)
display("Raw Data Located @: "+ dataFolder)
display("Raw DotMat Data Located @ :"+ rawMatsFolder)
display("Central Nodes DotMat Data Located @ :"+ centralMatsFolder)
display("Reference Data Located @: "+ referenceFolder )
display("Reference DotMat Data Located @ :"+ referenceMatsFolder)
display("Palas Raw Data Located @ :"+ palasFolder)
display("Palas DotMat Data Located @ :"+ palasMatsFolder)
display("Car GPS Files Located @ :"+ GPSFolder)

%% Loading Files
display("Loading Palas Files")
load(strcat(palasMatsFolder,"/palas.mat"));
palasData = palas;

display("Loading Licor Files")
load(strcat(licorMatsFolder,"/licor.mat"));
licorData = mintsData;
licorData = licorData(:, {...
    'CO2' ,...
    'H2O' ...
    });

display("Loading nox Files")
load(strcat(noxMatsFolder,"/nox.mat"));
noxData = mintsData;
noxData = noxData(:, {...
    'NO2' ,...
    'NO', ...
    'NOX' ...
    });

display("Loading BC Files")
load(strcat(bcMatsFolder,"/bc.mat"));
bcData = mintsData;
bcData = bcData(:, {...
    'BC' ,...
    });

display("Loading O3 Files")
load(strcat(o3MatsFolder,"/o3.mat"));
o3Data = mintsData;
o3Data = o3Data(:, {...
    'ozone' ,...
    });
o3Data.Properties.VariableNames =   ...
    {'O3'};

display("Loading GPS Files");
load(strcat(GPSFolder,"/carMintsGPSCoords.mat"));
carGpsData = mintsData;

display("Loading Airmar Files");
load(strcat(airmarFolder,"/airMar_",airmarID,".mat"));
airmarData = mintsDataAll;

airmarData = removevars( airmarData, {...
    'courseOGTrue'                           ,...
    'courseOGMagnetic'                       ,...
    'speedOverGroundKnots'                   ,...
    'speedOverGroundKMPH'                    ,...
    'heading'                                ,...
    'barrometricPressureMercury'             ,...
    'barrometricPressureBars_mintsDataWimda' ,...
    'windDirectionTrue'                      ,...
    'windDirectionMagnetic'                  ,...
    'windSpeedKnots'                         ,...
    'windSpeedMetersPerSecond'               ,...
    'windAngle'                              ,...
    'windSpeed'                              ...
    });


airmarWSTC     = gpsCropCoord(airmarData,32.992179, -96.757777,0.0015,0.0015);

airmarWSTC     = removevars( airmarWSTC, {...
    'latitudeCoordinate'  ,...
    'longitudeCoordinate'  });

airmarWSTC.Properties.VariableNames =   ...
    {'temperatureAirmar'   ,...
    'humidityAirmar'      ,...
    'dewPointAirmar'      ,...
    'pressureAirmar'};


%% Syncing Data
display("Aligning GPS data with Palas Data")
palasWithGPS  =  rmmissing(synchronize(palasData,carGpsData,'intersection'));

display("WSTC Palas Data")
palasWSTC = gpsCropCoord(palasWithGPS,32.992179, -96.757777,0.0015,0.0015);
palasWSTC = removevars( palasWSTC, {...
    'latitudeCoordinate'  ,...
    'longitudeCoordinate'  });

display("Aligning GPS Licor Data")
licorWithGPS  =  rmmissing(synchronize(licorData,carGpsData,'intersection'));

display("WSTC Palas Data")
licorWSTC = gpsCropCoord(licorWithGPS,32.992179, -96.757777,0.0015,0.0015);
licorWSTC = removevars( licorWSTC, {...
    'latitudeCoordinate'  ,...
    'longitudeCoordinate'  });

display("Aligning GPS data with nox Data")
noxWithGPS  =  rmmissing(synchronize(noxData,carGpsData,'intersection'));

display("WSTC nox Data")
noxWSTC = gpsCropCoord(noxWithGPS,32.992179, -96.757777,0.0015,0.0015);
noxWSTC = removevars( noxWSTC, {...
    'latitudeCoordinate'  ,...
    'longitudeCoordinate'  });

display("Aligning GPS data with bc Data")
bcWithGPS  =  rmmissing(synchronize(bcData,carGpsData,'intersection'));

display("WSTC BC Data")
bcWSTC = gpsCropCoord(bcWithGPS,32.992179, -96.757777,0.0015,0.0015);
bcWSTC = removevars( bcWSTC, {...
    'latitudeCoordinate'  ,...
    'longitudeCoordinate'  });

display("Aligning GPS data with o3 Data")
o3WithGPS  =  rmmissing(synchronize(o3Data,carGpsData,'intersection'));

display("WSTC Palas Data")
o3WSTC = gpsCropCoord(o3WithGPS,32.992179, -96.757777,0.0015,0.0015);
o3WSTC = removevars( o3WSTC, {...
    'latitudeCoordinate'  ,...
    'longitudeCoordinate'  });

display("Palas With Airmar")
mintsRef         =  synchronize(licorWSTC,noxWSTC,'union');
mintsRef         =  synchronize(mintsRef,palasWSTC,'union');
mintsRef         =  synchronize(mintsRef,airmarWSTC,'union');
mintsRef         =  synchronize(mintsRef,bcWSTC,'union');
mintsRef         =  synchronize(mintsRef,o3WSTC,'union');
%% Loading Central Data and merging them with Palas Data
display("Analysis")

% Check if availble for Central Nodes

nodeID   = nodeIDs{nodeIndex}.nodeIDXu4;
nodeStack= nodeIDs{nodeIndex}.inputStack;

% if file Exists was recorded
fileName  = strcat(rawMatsFolder,'/centralNodes/centralNodesAnalisis_',...
    sprintf('%02d',nodeIndex),'_Mints_',nodeID,'.mat');
if isfile(fileName)
    load(fileName);
else
    display(strcat("No Data Exists for Node: ",nodeID));
    return
end
eval(strcat("nodeData = mintsData_",nodeID,"_Analysis;"));


%% Cropping GPS Coordinates
centralMintsWSTC = gpsCropCoord(nodeData,32.992179, -96.757777,0.0015,0.0015);

% if enough data was recorded
if (height(centralMintsWSTC)<100)
    display(strcat("Not enough Data points for Node: ",nodeID));
    return
end
%
centralWithTargets =  synchronize(centralMintsWSTC,mintsRef,'union');
%
display("Save merged data for calibration: "+nodeID )
% fileNameStr = strcat(mergedMatsFolder,"/centralWithTargets_", nodeID,".mat");
% folderCheck(fileNameStr)
% save(fileNameStr,...
%     'centralWithTargets')


for targetIndex = 1: length(mintsTargets)
    %     try
    target      = mintsTargets{targetIndex}.target;
    targetLabel = mintsTargets{targetIndex}.targetLabel;
    targetStack = mintsTargets{targetIndex}.targetStack;
    instrument  = mintsTargets{targetIndex}.instrument;
    unit        = mintsTargets{targetIndex}.unit;
    limits      = mintsTargets{targetIndex}.limits;
    
    display(newline)
    display("Gainin Data set for Node "+ nodeID + " with target output " + targetLabel +" @ "+ datestr(datetime('now')) )
    
    % Creating Training Data for calibration
    display(newline)
    display("Creating Training Data Sets for Node: "+ nodeID )
    eval(strcat("mintsInputs      = mintsDefinitions.mintsInputsStack_"...
        ,string(nodeStack),"_",string(targetStack),";"))
    eval(strcat("mintsInputLabels      = mintsDefinitions.mintsInputLabelsStack_"...
        ,string(nodeStack),"_",string(targetStack),";"))
    
    %         eval(strcat("mintsInputLabels = mintsDefinitions.mintsInputLabelsStack",string(nodeIDs{nodeIndex}.inputStack),";"))
    
    [In_Train,Out_Train,...
        In_Validation,Out_Validation,...
        trainingTT, validatingTT,...
        trainingT, validatingT ] ...
        = representativeSampleSimpleNANTT(...
        centralWithTargets,mintsInputs,target,pValid,...
        nodeID,targetLabel,mergedMatsFolder);
    
    if(target == "dCn_palas" )
        trainingT(trainingT.dCn_palas == Inf,:) = [];
        In_Train(trainingT.dCn_palas == Inf,:) = [];
        Out_Train(trainingT.dCn_palas == Inf,:) = [];
        In_Validation(validatingT.dCn_palas == Inf,:) = [];
        Out_Validation(validatingT.dCn_palas == Inf,:) = [];
        trainingTT(trainingT.dCn_palas == Inf,:) = [];
        validatingTT(validatingT.dCn_palas == Inf,:) = [];
        trainingT(trainingT.dCn_palas == Inf,:) = [];
        validatingT(validatingT.dCn_palas == Inf,:) = [];
    end
    
    display("Running Regression")
    
    tic
    Mdl = fitrnn(In_Train,Out_Train);
    toc
    
    %--------------------------------------------------------------------------
    outTrainEstimate= predictrnn(Mdl,In_Train);
    outValidEstimate= predictrnn(Mdl,In_Validation);
    
    %% Get Statistics
    display(newline);
    combinedFigDaily   = getFileNameFigure(plotsFolder,nodeID,target,dailyString)
    folderCheck(combinedFigDaily)
    
    combinedFig        = strrep(combinedFigDaily,dailyString,strcat(versionStrTrain,"/",versionStrTrain));
    folderCheck(combinedFig)
    
    % Adding a Time Series Plot (02,21,2021)
    combinedFigTT        = strrep(combinedFig,".png",...
        "_TT.png")
    
    drawTimeSeries3x(trainingTT.dateTime,outTrainEstimate,...
        validatingTT.dateTime,outValidEstimate,...
        [trainingTT.dateTime;validatingTT.dateTime],...
        [Out_Train;Out_Validation],...
        "Training Estimates","Testing Estimates ",instrument,...
        nodeID,"Date Time (UTC)",...
        targetLabel +" ("+ unit+ ")",...
        targetLabel + " Calibration ("+strrep(versionStrTrain,"_"," ")+")",...
        combinedFigTT)
    
    graphTitle2 = strcat(" ");
    
    drawScatterPlotMintsCombinedLimitsUTD(Out_Train,...
        outTrainEstimate,...
        Out_Validation,...
        outValidEstimate,...
        limits{1},...
        limits{2},...
        nodeID,...
        targetLabel,...
        instrument,...
        "Central Node",...
        unit,...
        combinedFigDaily,...
        graphTitle1,...
        graphTitle2);

    
    resultsCurrent=drawScatterPlotMintsCombinedLimitsUTD(Out_Train,...
        outTrainEstimate,...
        Out_Validation,...
        outValidEstimate,...
        limits{1},...
        limits{2},...
        nodeID,...
        targetLabel,...
        instrument,...
        "Central Node",...
        unit,...
        combinedFig,...
        graphTitle1,...
        graphTitle2);
     
     % Plotting QQ Plots for Testing and Validation 
     combinedFigTQQ        = strrep(combinedFig,".png",...
      "_QQ.png")
      drawQQPlotMints(Out_Validation,...
                      outValidEstimate,...
                      limits{1},...
                      limits{2},...
                      nodeID,...
                      targetLabel,...
                      "QQ Plot",...
                      instrument,...
                      "Central Node",...
                      unit,...
                      combinedFigTQQ   )
    
    %% Saving Model Files
    display(strcat("Saving Model Files for Node: ",string(nodeID), " & target :" ,targetLabel));
    modelsSaveNameDaily = getMintsNameGeneral(modelsMatsFolder,nodeID,...
        target,"daily_Mdl")
    folderCheck(modelsSaveNameDaily)
    
    modelsSaveName      = strrep(modelsSaveNameDaily,"daily_Mdl",strcat(versionStrMdl,"/",versionStrMdl))
    resultsSaveName     = strrep(modelsSaveNameDaily,".mat",".csv")
    
    
    folderCheck(modelsSaveName)
    
    
    save(modelsSaveName,'Mdl',...
        'mintsInputs',...
        'mintsInputLabels',...
        'target',...
        'targetLabel',...
        'resultsCurrent'...
        )
    
    save(modelsSaveNameDaily,'Mdl',...
        'mintsInputs',...
        'mintsInputLabels',...
        'target',...
        'targetLabel',...
        'resultsCurrent'...
        )
    
    
    display(newline);
    
    %% Additional parametors to keep
    resultsCurrent.pValid             = pValid;
    resultsCurrent.nodeID             = nodeID;
    resultsCurrent.target             = target;
    if(representativeSample)
        resultsCurrent.binsPerColumn      = binsPerColumn;
        resultsCurrent.numberPerBin       = numberPerBin;
    else
        resultsCurrent.binsPerColumn      = 0;
        resultsCurrent.numberPerBin       = 0;
        binsPerColumn = 0; 
        numberPerBin = 0;
    end
    
    resultsCurrent.trainRows          = height(trainingTT);
    resultsCurrent.validRows          = height(validatingTT);
    
    resultsCurrent.versionStrMdl = versionStrMdl;
    
    resultsT =  struct2table(resultsCurrent)   ;
    
    if isfile(resultsSaveName)
        % File exists.
        writetable(resultsT,resultsSaveName,"WriteMode","append");
    else
        % File does not exist.
        writetable(resultsT,resultsSaveName);
    end
    
    % Global CSV  Changed to test CSV
    globalCSV   = modelsMatsFolder +"/"+globalCSVLabel + ...
        ".csv";
    
    if isfile(globalCSV)
        % File exists.
        writetable(resultsT,globalCSV,"WriteMode","append");
    else
        % File does not exist.
        writetable(resultsT,globalCSV);
    end
    
    
    display(newline);
    
    %% Saving Training Data
    
    trainingSaveNameDaily = getMintsNameGeneral(trainingMatsFolder,nodeID,...
        target,dailyString)
    folderCheck(trainingSaveNameDaily)
    
    trainingSaveName      = strrep(trainingSaveNameDaily,dailyString,strcat(versionStrTrain,"/",versionStrTrain))
    folderCheck(trainingSaveName)
    
    
    save(trainingSaveNameDaily,...
        'Mdl',...
        'In_Train',...
        'Out_Train',...
        'In_Validation',...
        'Out_Validation',...
        'trainingTT',...
        'validatingTT',...
        'trainingT',...
        'validatingT',...
        'mintsInputs',...
        'mintsInputLabels',...
        'target',...
        'targetLabel',...
        'nodeID',...
        'mintsInputs',...
        'mintsInputLabels',...
        'binsPerColumn',...
        'numberPerBin',...
        'pValid', ...
        'resultsCurrent'...
        )
    
    save(trainingSaveName,...
        'Mdl',...
        'In_Train',...
        'Out_Train',...
        'In_Validation',...
        'Out_Validation',...
        'trainingTT',...
        'validatingTT',...
        'trainingT',...
        'validatingT',...
        'mintsInputs',...
        'mintsInputLabels',...
        'target',...
        'targetLabel',...
        'nodeID',...
        'mintsInputs',...
        'mintsInputLabels',...
        'binsPerColumn',...
        'numberPerBin',...
        'pValid' ,...
        'resultsCurrent'...
        )
    
    
    %% Saving the Structure File
    clearvars -except...
        graphTitle1...
        versionStrTrain versionStrMdl dailyString dailyStringImp ...
        plotsFolder  ...
        palasWithAirmar deployments ...
        nodeIDs nodeID centralWithTargets CentralMatsFolder...
        versionStrTrain versionStrMdl ...
        rawMatsFolder mergedMatsFolder ...
        trainingMatsFolder modelsMatsFolder...
        nodeIDs nodeIndex nodeID ...
        mintsInputs mintsInputLabels ...
        mintsTargets mintsTargetLabels targetIndex ...
        binsPerColumn numberPerBin pValid  ...
        mintsDefinitions results resultsFolder ...
        resultsGlobal resultsCurrent globalCSVLabel...
        nodeStack targetStack representativeSample ...
        timeSpan
    close all
    
    
    %     catch e
    %         close all
    %         fprintf(1,'The identifier was:\n%s',e.identifier);
    %         fprintf(1,'There was an error! The message was:\n%s',e.message);
    %     end
    %
    
    
end %Targets
display(newline);

end
%% End of code
